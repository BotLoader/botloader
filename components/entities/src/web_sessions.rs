//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use twilight_model::id::marker::UserMarker;

use crate::TwilightId;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "web_sessions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub token: String,
    pub kind: SessionType,
    pub user_id: TwilightId<UserMarker>,
    pub discriminator: i16,
    #[sea_orm(column_type = "Text")]
    pub username: String,
    #[sea_orm(column_type = "Text")]
    pub avatar: String,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum SessionType {
    User = 1,
    ApiKey = 2,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::discord_oauth_tokens::Entity",
        from = "Column::UserId",
        to = "super::discord_oauth_tokens::Column::UserId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    DiscordOauthTokens,
}

impl Related<super::discord_oauth_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DiscordOauthTokens.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
